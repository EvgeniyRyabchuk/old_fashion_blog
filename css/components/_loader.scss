
@use "sass:list";
@use '../abstracts/placeholders';

// $loader-size: red, green, blue;

$circle-count: 6;
$animation-duration: 2s;
$base-delay: 0.1s; // delay step

$circle-color: rgb(42, 79, 189);

$loader-wrapper-size: calc(10%);
$cirle-size-percent: 10%; 
$wrapper-circle-size-percent: 0.4;


@mixin getDimensionForCircle() {
    width: 100%;
    aspect-ratio: 1 / 1; // to ideal circle 
}
@mixin getDimensionForCircleWrapper() {
    width: dimensionForWrapper();
    height: dimensionForWrapper();
}

@function dimensionForWrapper () {
   @return calc($wrapper-circle-size-percent * 100%); 
}


.loader-wrapper {
    @extend %fullScreem; 
    background-color: rgb(147, 147, 147, 0.5);
    display: flex;
    justify-content: center; 
    align-items: center; 

    .loader {
        @include getDimensionForCircleWrapper();
        position: relative;
        
        @for $i from 1 through $circle-count { 
            .circle-wrapper-#{$i} { 
                position: absolute;
                top: 0;
                left: calc(100% / 2); 
                width: $cirle-size-percent;
                height: 100%;
                // transition: transform 1s ease-in-out;
                // margin: 0 auto; 
                animation: circleMovement $animation-duration infinite ease-in-out;
                // animation: pulse 2s infinite ease-in-out; 
                animation-delay: $i * $base-delay;

                // transform-origin: center center;

                    .circle-#{$i} { 
                        @include getDimensionForCircle();
                        background-color: $circle-color;
                        border-radius: 50%;  // always rounded  
                    }
                }
    
        }
    }
}



@keyframes circleMovement {
    0% {
        transform: rotate(0deg);
    }
    75% {
        transform: rotate(360deg);
    } 
    100% {
        transform: rotate(360deg);
    }
}
